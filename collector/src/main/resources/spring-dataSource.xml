<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath*:config-dataSource.properties"
                                  ignore-unresolvable="true"/>

    <!-- JNDI方式配置数据源 -->
    <!--<bean id="dataSource"
          class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName"
                  value="${jndiName}"/>
    </bean>-->

    <!-- 数据源 -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init"
          destroy-method="close">
        <!-- 这一项可配可不配，如果不配置druid会根据url自动识别dbType， 然后选择相应的driverClassName -->
        <!--<property name="driverClassName"
                  value="${jdbc.driverClassName}" />-->
        <!-- 配置这个属性的意义在于，如果存在多个数据源，监控的时候 可以通过名字来区分开来。如果没有配置，将会生成一个名字， 格式是："DataSource-" + System.identityHashCode(this) -->
        <property name="name"
                  value="${jdbc.dataSourceName}"/>
        <!-- 连接数据库的url -->
        <property name="url"
                  value="${jdbc.url}"/>
        <!-- 连接数据库的用户名 -->
        <property name="username"
                  value="${jdbc.username}"/>
        <!-- 连接数据库的密码。如果你不希望密码直接写在配置文件中， 可以使用ConfigFilter -->
        <property name="password"
                  value="${jdbc.password}"/>

        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法， 或者第一次getConnection时 -->
        <property name="initialSize"
                  value="1"/>
        <!-- 连接池最大连接数量 -->
        <property name="maxActive"
                  value="20"/>
        <!-- 连接池最小连接数量 -->
        <property name="minIdle"
                  value="1"/>
        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后， 缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁 -->
        <property name="maxWait"
                  value="60000"/>

        <!-- 是否缓存preparedStatement，也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说oracle。 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。 5.5及以上版本有PSCache，建议开启 -->
        <property name="poolPreparedStatements"
                  value="true"/>
        <!-- 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说100 -->
        <property name="maxOpenPreparedStatements"
                  value="100"/>

        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、 testWhileIdle都不会其作用。在mysql中通常为select 'x'，在oracle中通常为 select 1 from dual -->
        <property name="validationQuery"
                  value="${jdbc.validationQuery}"/>
        <!-- 物理连接初始化的时候执行的sql -->
        <property name="connectionInitSqls"
                  value="${jdbc.connectionInitSqls}"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效， 做了这个配置会降低性能 -->
        <property name="testOnBorrow"
                  value="false"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效， 做了这个配置会降低性能 -->
        <property name="testOnReturn"
                  value="false"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis， 执行validationQuery检测连接是否有效 -->
        <property name="testWhileIdle"
                  value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <!-- 有两个含义： 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
        <property name="timeBetweenEvictionRunsMillis"
                  value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <!-- Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于 minEvictableIdleTimeMillis，则关闭当前连接 -->
        <property name="minEvictableIdleTimeMillis"
                  value="300000"/>

        <!-- 是否打开removeAbandoned功能，对于建立时间超过removeAbandonedTimeout的连接强制关闭 -->
        <property name="removeAbandoned"
                  value="false"/>
        <!-- 多少秒删除连接，秒为单位，指定连接建立多长时间就需要被强制关闭，如果removeAbandoned为false，这个设置项不再起作用 -->
        <property name="removeAbandonedTimeout"
                  value="28800"/>
        <!-- 关闭abanded连接时输出错误日志，指定发生removeAbandoned的时候，是否记录当前线程的堆栈信息到日志中 -->
        <property name="logAbandoned"
                  value="true"/>

        <!-- 属性类型是字符串，通过别名的方式配置扩展插件， 常用的插件有： 监控统计用的stat 日志用的log4j 防御sql注入的wall -->
        <!-- 保存DruidDataSource的监控记录,DruidDataSource会定期把监控数据输出到日志中 -->
        <property name="timeBetweenLogStatsMillis"
                  value="300000"/>

        <!--<property name="proxyFilters">
            <list>
                &lt;!&ndash; 打开druid的sql日志输出 &ndash;&gt;
                <bean class="com.alibaba.druid.filter.logging.Log4j2Filter">
                    <property name="statementParameterClearLogEnable"
                              value="false" />
                    <property name="dataSourceLogEnabled"
                              value="false" />
                    <property name="connectionLogEnabled"
                              value="false" />
                    <property name="connectionLogErrorEnabled"
                              value="false" />
                    &lt;!&ndash; statementLogEnabled这个属性开启后，会在日志中打印sql语句 &ndash;&gt;
                    <property name="statementLogEnabled"
                              value="false" />
                    <property name="statementLogErrorEnabled"
                              value="false" />
                    <property name="resultSetLogEnabled"
                              value="false" />
                    <property name="resultSetLogErrorEnabled"
                              value="false" />
                </bean>
                &lt;!&ndash; 打开druid的监控功能 &ndash;&gt;
                <bean class="com.alibaba.druid.filter.stat.StatFilter" />
            </list>
        </property>-->
        <property name="filters"
                  value="stat"/>

    </bean>

</beans>